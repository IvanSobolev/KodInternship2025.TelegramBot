import telebot
from telebot import types
from typing import Dict, List

from config import TOKEN
from api import client
from ui import keyboards
from utils.status import get_task_status_from_code

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    user_first_name = message.from_user.first_name
    user_id = message.from_user.id
    
    welcome_text = f"""
ü§ñ *–ü—Ä–∏–≤–µ—Ç, {user_first_name}!* 

–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª.

üÜî –í–∞—à Telegram ID: `{user_id}`
"""
    
    bot.send_message(
        message.chat.id, 
        welcome_text,
        parse_mode="Markdown"
    )
    
    select_department_message = "üìã *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:*"
    markup = keyboards.get_department_selection_markup()
    
    bot.send_message(
        message.chat.id,
        select_department_message,
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏')
def list_tasks(message):
    user_id = message.from_user.id
    
    available_tasks_data = client.get_available_tasks(user_id)
    
    if not available_tasks_data:
        bot.send_message(
            message.chat.id,
            "üì≠ *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.",
            parse_mode="Markdown",
            reply_markup=keyboards.get_main_menu()
        )
        return
    
    bot.send_message(
        message.chat.id,
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á:",
        parse_mode="Markdown"
    )
    
    for task_data in available_tasks_data:
        task_id = task_data.get('id')
        
        status_code = task_data.get('status')
        status_info = get_task_status_from_code(status_code)
        
        if status_info["is_completed"]:
            continue
            
        department_name = client.get_department_name(task_data.get('department', 0))
        
        status_emoji = status_info["emoji"]
        status_text = status_info["text"]
        assigned = f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å" if status_code in [1, 2] else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        
        is_assigned = status_code in [1, 2]
        is_review = status_info["is_review"]
        completed = status_info["is_completed"]
        markup = keyboards.get_task_action_markup(task_id, is_assigned, is_review, completed)
        
        task_card = f"""
üîπ *{task_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*
{task_data.get('description', task_data.get('text', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}

üìÅ –û—Ç–¥–µ–ª: *{department_name}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_emoji} {status_text}*
üë§ {assigned}
"""
        
        bot.send_message(
            message.chat.id,
            task_card,
            reply_markup=markup,
            parse_mode="Markdown"
        )

@bot.message_handler(func=lambda message: message.text == 'üîç –ú–æ–∏ –∑–∞–¥–∞—á–∏')
def my_tasks(message):
    user_id = message.from_user.id
    
    api_task = client.get_user_active_tasks(user_id)
    
    if not api_task:
        bot.send_message(
            message.chat.id,
            "üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n–í—ã –ø–æ–∫–∞ –Ω–µ –≤–∑—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
            parse_mode="Markdown",
            reply_markup=keyboards.get_main_menu()
        )
        return
    
    task_id = api_task.get('id')
    
    status_code = api_task.get('status')
    status_info = get_task_status_from_code(status_code)
    
    is_review = status_info["is_review"]
    is_completed = status_info["is_completed"]
    status_text = status_info["text"]
    status_emoji = status_info["emoji"]
    
    task_status = api_task.get('statusString', '').lower()
    is_cancelled = 'cancel' in task_status or '–æ—Ç–º–µ–Ω' in task_status
    
    bot.send_message(
        message.chat.id,
        "üîç *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ –≤–∞—Å:",
        parse_mode="Markdown"
    )
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    if not is_review and not is_completed and not is_cancelled:
        markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", 
            callback_data=f"complete_{task_id}"))
    
    department_name = client.get_department_name(api_task.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω'))
    
    task_card = f"""
üîπ *{api_task['title']}*
{api_task.get('description', api_task.get('text', '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}

üìÅ –û—Ç–¥–µ–ª: *{department_name}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_emoji} {status_text}*
üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å
"""
    
    bot.send_message(
        message.chat.id,
        task_card,
        reply_markup=markup if markup.keyboard else None,
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def help_command(message):
    user_id = message.from_user.id
    help_text = f"""
‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:

‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ë—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
2. –ù–∞–∂–º–∏—Ç–µ "‚úã –í–∑—è—Ç—å –∑–∞–¥–∞—á—É" –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∑–∞–¥–∞—á–µ–π
3. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á –Ω–∞–∂–º–∏—Ç–µ "üîç –ú–æ–∏ –∑–∞–¥–∞—á–∏"
4. –ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:*
–í–∞—à Telegram ID: `{user_id}`
–≠—Ç–æ—Ç ID –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –æ—Ç —Å–∏—Å—Ç–µ–º—ã.
"""
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown", reply_markup=keyboards.get_main_menu())

@bot.callback_query_handler(func=lambda call: True)
def button_handler(call):
    try:
        callback_data = call.data
        user_id = call.from_user.id
        user_first_name = call.from_user.first_name
        
        if callback_data.startswith("register_dept_"):
            department_id = int(callback_data.split("_")[-1])
            department_name = client.get_department_name(department_id)
            
            registration_result = client.register_worker(user_id, user_first_name, department_id)
            
            if registration_result:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n–í–∞—à –æ—Ç–¥–µ–ª: *{department_name}*",
                    parse_mode="Markdown"
                )
                
                bot.send_message(
                    call.message.chat.id,
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n\n‚Ä¢ *üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á\n‚Ä¢ *üîç –ú–æ–∏ –∑–∞–¥–∞—á–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ –≤–∞—Å\n‚Ä¢ *‚ÑπÔ∏è –ü–æ–º–æ—â—å* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
                    parse_mode="Markdown",
                    reply_markup=keyboards.get_main_menu()
                )
            else:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå *–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
                
                markup = keyboards.get_department_selection_markup()
                
                bot.send_message(
                    call.message.chat.id,
                    "üìã *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª —Å–Ω–æ–≤–∞:*",
                    parse_mode="Markdown",
                    reply_markup=markup
                )
            
            return
            
        elif callback_data.startswith("select_dept_"):
            department_id = int(callback_data.split("_")[-1])
            department_name = client.get_department_name(department_id)
            
            success = client.update_worker_department(user_id, department_id)
            
            if success:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ *–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω*\n\n–í–∞—à –æ—Ç–¥–µ–ª: *{department_name}*",
                    parse_mode="Markdown"
                )
                
                bot.send_message(
                    call.message.chat.id,
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
                    reply_markup=keyboards.get_main_menu()
                )
            else:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–¥–µ–ª–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
                
                bot.send_message(
                    call.message.chat.id,
                    "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
                    reply_markup=keyboards.get_main_menu()
                )
            
            return
        
        if "_" in callback_data:
            action, task_id = callback_data.split("_", 1)
            
            if action == "complete_api":
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å api_ –∏–∑ task_id
                if task_id.startswith("api_"):
                    task_id = task_id[4:]
                
                api_task = client.get_user_active_tasks(user_id)
                
                if api_task:
                    task_matches = str(api_task.get('id')) == str(task_id)
                    
                    if task_matches:
                        success, message_text = client.complete_task(task_id)
                        
                        if success:
                            status_info = get_task_status_from_code(2)
                            status_text = status_info["text"]
                            status_emoji = status_info["emoji"]
                            
                            department = client.get_department_name(api_task.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω'))
                            
                            notification_text = "üìù –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é!"
                            
                            task_card = f"""
üîπ *{api_task['title']}*
{api_task.get('description', api_task.get('text', '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}

üìÅ –û—Ç–¥–µ–ª: *{department}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_emoji} {status_text}*
üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å
"""
                            
                            bot.edit_message_text(
                                chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=task_card,
                                parse_mode="Markdown"
                            )
                            
                            bot.answer_callback_query(
                                call.id, 
                                text=notification_text, 
                                show_alert=True
                            )
                        else:
                            error_text = f"‚ùå –û—à–∏–±–∫–∞: {message_text}"
                            if len(error_text) > 200:
                                error_text = error_text[:197] + "..."
                                
                            bot.answer_callback_query(
                                call.id, 
                                text=error_text, 
                                show_alert=True
                            )
                    else:
                        success, message_text = client.complete_task(task_id)
                        
                        if success:
                            bot.answer_callback_query(
                                call.id, 
                                text="üìù –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é!", 
                                show_alert=True
                            )
                            bot.send_message(
                                call.message.chat.id, 
                                "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é!",
                                reply_markup=keyboards.get_main_menu()
                            )
                        else:
                            error_text = f"‚ùå –û—à–∏–±–∫–∞: {message_text}"
                            if len(error_text) > 200:
                                error_text = error_text[:197] + "..."
                                
                            bot.answer_callback_query(
                                call.id, 
                                text=error_text, 
                                show_alert=True
                            )
                else:
                    success, message_text = client.complete_task(task_id)
                    
                    if success:
                        bot.answer_callback_query(
                            call.id, 
                            text="üìù –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é!", 
                            show_alert=True
                        )
                        bot.send_message(
                            call.message.chat.id, 
                            "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é!",
                            reply_markup=keyboards.get_main_menu()
                        )
                    else:
                        error_text = f"‚ùå –û—à–∏–±–∫–∞: {message_text}"
                        if len(error_text) > 200:
                            error_text = error_text[:197] + "..."
                            
                        bot.answer_callback_query(
                            call.id, 
                            text=error_text, 
                            show_alert=True
                        )
                return
            
            if action == "take":
                api_task = client.get_user_active_tasks(user_id)
                has_active_tasks = api_task is not None
                
                if has_active_tasks:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="‚ùå *–ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á*\n\n–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤–∑—è—Ç—å –Ω–æ–≤—É—é.",
                        parse_mode="Markdown"
                    )
                    bot.answer_callback_query(
                        call.id, 
                        text="–ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —Å–Ω–∞—á–∞–ª–∞.", 
                        show_alert=True
                    )
                    return
                
                success, result = client.accept_task(user_id, task_id)
                
                if success:
                    task_data = client.get_task_by_id(task_id)
                    if not task_data:
                        bot.answer_callback_query(call.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ", show_alert=True)
                        return
                    
                    task_status_code = task_data.get('status', 1)
                    status_info = get_task_status_from_code(task_status_code)
                    
                    markup = types.InlineKeyboardMarkup(row_width=1)
                    
                    if not status_info["is_review"] and not status_info["is_completed"]:
                        markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"complete_{task_id}"))
                    
                    task_card = f"""
üîπ *{task_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*
{task_data.get('description', task_data.get('text', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}

üìÅ –û—Ç–¥–µ–ª: *{client.get_department_name(task_data.get('department', 0))}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_info["emoji"]} {status_info["text"]}*
üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å
"""
                    
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=task_card,
                        reply_markup=markup if markup.keyboard else None,
                        parse_mode="Markdown"
                    )
                    
                    bot.answer_callback_query(
                        call.id, 
                        text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!", 
                        show_alert=True
                    )
                else:
                    error_text = f"‚ùå –û—à–∏–±–∫–∞: {result}"
                    if len(error_text) > 200:
                        error_text = error_text[:197] + "..."
                        
                    bot.answer_callback_query(
                        call.id, 
                        text=error_text, 
                        show_alert=True
                    )
                    
            elif action == "complete":
                success, message_text = client.complete_task(task_id)
                
                if success:
                    task_data = client.get_task_by_id(task_id)
                    if not task_data:
                        bot.answer_callback_query(
                            call.id, 
                            text="üìù –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é!", 
                            show_alert=True
                        )
                        return
                    
                    status_info = get_task_status_from_code(2)
                    status_text = status_info["text"]
                    status_emoji = status_info["emoji"]
                    
                    notification_text = "üìù –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é!"
                    
                    task_card = f"""
üîπ *{task_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*
{task_data.get('description', task_data.get('text', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}

üìÅ –û—Ç–¥–µ–ª: *{client.get_department_name(task_data.get('department', 0))}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_emoji} {status_text}*
üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å
"""
                    
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=task_card,
                        parse_mode="Markdown"
                    )
                    
                    bot.answer_callback_query(
                        call.id, 
                        text=notification_text, 
                        show_alert=True
                    )
                else:
                    error_text = f"‚ùå –û—à–∏–±–∫–∞: {message_text}"
                    if len(error_text) > 200:
                        error_text = error_text[:197] + "..."
                        
                    bot.answer_callback_query(
                        call.id, 
                        text=error_text, 
                        show_alert=True
                    )
    except Exception as e:
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.send_message(
        message.chat.id, 
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=keyboards.get_main_menu()
    )