import os
import json
import logging
import asyncio
import threading
import telebot
import requests
from telebot import types
from aiokafka import AIOKafkaConsumer
from dataclasses import dataclass
from uuid import UUID
from typing import Dict, List, Optional

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Task data model
@dataclass
class Task:
    task_id: UUID
    title: str
    text: str
    department: str
    tg_id: int = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assigned_to: Optional[int] = None
    completed: bool = False
    in_review: bool = False  # –§–ª–∞–≥ –¥–ª—è –∑–∞–¥–∞—á, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–≤—å—é

# In-memory storage for tasks
tasks: Dict[str, Task] = {}
user_tasks: Dict[int, List[str]] = {}

# Bot configuration
TOKEN = ""

# Kafka configuration
KAFKA_BOOTSTRAP_SERVERS = "150.241.88.0:29092"
KAFKA_TOPIC = "new_tasks_notifications"  
KAFKA_SIMPLE_NOTIFICATIONS_TOPIC = "simple_notifications" 

# API Configuration
API_BASE_URL = "http://150.241.88.0:8080/api"

# Initialize the bot
bot = telebot.TeleBot(TOKEN)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è id –æ—Ç–¥–µ–ª–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
def get_department_name(department_id):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–¥–µ–ª–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
    departments = {
        0: "–ü—É—Å—Ç–æ",
        1: "Frontend",
        2: "Backend",
        3: "UI/UX",
    }
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    if isinstance(department_id, str):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            for key in departments.keys():
                if str(key) in department_id:
                    return departments[key]
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            return department_id
        except:
            return department_id
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
    if isinstance(department_id, int) and department_id in departments:
        return departments[department_id]
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return str(department_id)

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏')
    btn2 = types.KeyboardButton('üîç –ú–æ–∏ –∑–∞–¥–∞—á–∏')
    btn3 = types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    markup.add(btn1, btn2, btn3)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
def register_worker(telegram_id, first_name, last_name=None, department_id=1):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
        url = f"{API_BASE_URL}/workers"
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ AddWorkerDto
        worker_data = {
            "telegramId": telegram_id,
            "fullName": first_name + (f" {last_name}" if last_name else ""),
            "department": department_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –≤–º–µ—Å—Ç–æ 0
        }
        
        headers = {
            "Content-Type": "application/json"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {json.dumps(worker_data)}")
        response = requests.post(url, json=worker_data, headers=headers)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code in [200, 201]:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {telegram_id}, –æ—Ç–¥–µ–ª: {department_id}")
            return True
        elif response.status_code == 500 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in response.text.lower():
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {telegram_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            update_result = update_worker_department(telegram_id, department_id)
            if update_result:
                logger.info(f"–û—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {department_id}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_active_tasks(telegram_id):
    try:
        url = f"{API_BASE_URL}/ProjectTask/active-for-user/{telegram_id}"
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 404:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (404)")
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ API –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –∏—Ö –Ω–µ—Ç
            if telegram_id in user_tasks:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                task_ids = user_tasks[telegram_id].copy()
                for task_id in task_ids:
                    handle_task_completion(task_id, telegram_id)
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
                if telegram_id in user_tasks:
                    user_tasks[telegram_id] = []
            return None
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API
def accept_task(telegram_id, task_id):
    try:
        url = f"{API_BASE_URL}/ProjectTask/{task_id}/accept"
        # –ü–∞—Ä–∞–º–µ—Ç—Ä tgId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ query parameter
        response = requests.post(url, params={"tgId": telegram_id})
        if response.status_code == 200:
            response_data = response.json()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            if isinstance(response_data, dict) and response_data.get("status") == 3:
                # –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                handle_task_completion(task_id, telegram_id)
                return True, "–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ, –≤–∫–ª—é—á–∞—è –æ—Ç–¥–µ–ª, –µ—Å–ª–∏ –æ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –∏–∑ API
            if task_id in tasks and isinstance(response_data, dict):
                if "department" in response_data:
                    tasks[task_id].department = response_data["department"]
            return True, response_data
        return False, f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {telegram_id}: {e}")
        return False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API
def complete_task(task_id):
    try:
        url = f"{API_BASE_URL}/ProjectTask/{task_id}/complete"
        response = requests.post(url)
        
        # –ï—Å–ª–∏ 404, –∑–Ω–∞—á–∏—Ç –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
        if response.status_code == 404:
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (404)")
            return True, "–ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            
        if response.status_code == 200:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                response_data = response.json()
                if isinstance(response_data, dict) and response_data.get("status") == 3:
                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å = 3 (–í—ã–ø–æ–ª–Ω–µ–Ω–∞), –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å = 3")
                    return True, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            except:
                pass
                
            return True, "–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é"
        return False, f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–µ–≤—å—é —á–µ—Ä–µ–∑ API
def send_to_review(task_id):
    try:
        url = f"{API_BASE_URL}/ProjectTask/{task_id}/review"
        response = requests.post(url)
        if response.status_code == 200:
            return True, "–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é"
        return False, f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ —Ä–µ–≤—å—é: {e}")
        return False, f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"

@bot.message_handler(commands=['start'])
def start(message):
    """Send a welcome message when the command /start is issued."""
    user_first_name = message.from_user.first_name
    user_last_name = message.from_user.last_name
    username = message.from_user.username
    user_id = message.from_user.id
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_first_name}, Telegram ID: {user_id}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª
    welcome_text = f"""
ü§ñ *–ü—Ä–∏–≤–µ—Ç, {user_first_name}!* 

–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª.

üÜî –í–∞—à Telegram ID: `{user_id}`
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    bot.send_message(
        message.chat.id, 
        welcome_text,
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞
    select_department_message = "üìã *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:*"
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("Frontend", callback_data="register_dept_1"),
        types.InlineKeyboardButton("Backend", callback_data="register_dept_2"),
        types.InlineKeyboardButton("UI/UX", callback_data="register_dept_3")
    )
    
    bot.send_message(
        message.chat.id,
        select_department_message,
        parse_mode="Markdown",
        reply_markup=markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_available_tasks(telegram_id):
    try:
        url = f"{API_BASE_URL}/ProjectTask/avaible-to-user/{telegram_id}"
        response = requests.get(url)
        if response.status_code == 200:
            tasks_data = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tasks_data)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑ API")
            return tasks_data
        elif response.status_code == 404:
            logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á (404)")
            return []
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return None

@bot.message_handler(func=lambda message: message.text == 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏')
def list_tasks(message):
    """List available tasks."""
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ API
    available_tasks_data = get_available_tasks(user_id)
    
    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    if available_tasks_data is None:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
        user_department = None
        try:
            url = f"{API_BASE_URL}/workers/{user_id}"
            response = requests.get(url)
            if response.status_code == 200:
                worker_data = response.json()
                user_department = worker_data.get("department")
                logger.info(f"User {user_id} department: {user_department}")
        except Exception as e:
            logger.error(f"Error getting user department: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ: {len(tasks)}")
        for task_id, task in tasks.items():
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id}: –æ—Ç–¥–µ–ª={task.department}, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞={task.assigned_to}, –∑–∞–≤–µ—Ä—à–µ–Ω–∞={task.completed}")
        
        # Filter tasks that are not assigned or assigned to this user
        # AND belong to the user's department
        available_tasks = []
        for task in tasks.values():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            assignment_condition = (task.assigned_to is None or task.assigned_to == user_id) and not task.completed
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–¥–µ–ª–∞
            department_match = False
            if user_department is None:  # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                department_match = True
            elif isinstance(task.department, str) and isinstance(user_department, (int, float)):
                # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –∑–∞–¥–∞—á–∏ - —Å—Ç—Ä–æ–∫–∞, –∞ –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —á–∏—Å–ª–æ
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ —á–∏—Å–ª–æ–≤–æ–π id
                department_match = str(user_department) in task.department.lower()
                logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ (—Å—Ç—Ä–æ–∫–∞-—á–∏—Å–ª–æ): {task.department} –∏ {user_department}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {department_match}")
            elif isinstance(user_department, str) and isinstance(task.department, (int, float)):
                # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å—Ç—Ä–æ–∫–∞, –∞ –æ—Ç–¥–µ–ª –∑–∞–¥–∞—á–∏ - —á–∏—Å–ª–æ
                department_match = str(task.department) in user_department.lower()
                logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ (—á–∏—Å–ª–æ-—Å—Ç—Ä–æ–∫–∞): {user_department} –∏ {task.department}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {department_match}")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–µ –∫ —Å—Ç—Ä–æ–∫–∞–º
                try:
                    user_dept_str = str(user_department).lower()
                    task_dept_str = str(task.department).lower()
                    department_match = user_dept_str == task_dept_str or task_dept_str in user_dept_str or user_dept_str in task_dept_str
                    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ (—Å—Ç—Ä–æ–∫–æ–≤–æ–µ): '{task_dept_str}' –∏ '{user_dept_str}', —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {department_match}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–æ–≤: {e}")
                    department_match = True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º
            if assignment_condition and department_match:
                available_tasks.append(task)
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ API
        available_tasks = []
        
        for task_data in available_tasks_data:
            task_id = task_data.get('id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            status_code = task_data.get('status')
            status_info = get_task_status_from_code(status_code)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if status_info["is_completed"]:
                continue
                
            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Task –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            new_task = Task(
                task_id=UUID(task_id) if task_id else UUID('00000000-0000-0000-0000-000000000000'),
                title=task_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                text=task_data.get('description', task_data.get('text', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')),
                department=task_data.get('department', 0),
                assigned_to=None if status_code == 0 else user_id,
                completed=status_info["is_completed"],
                in_review=status_info["is_review"]
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            tasks[str(new_task.task_id)] = new_task
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
            available_tasks.append(new_task)
            
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(available_tasks)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
    if not available_tasks:
        bot.send_message(
            message.chat.id,
            "üì≠ *–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )
        return
    
    bot.send_message(
        message.chat.id,
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á:",
        parse_mode="Markdown"
    )
    
    for task in available_tasks:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status_emoji = "‚úÖ" if task.completed else "üîÑ" if task.in_review else "‚è≥" if task.assigned_to else "üÜï"
        status_text = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.completed else "–ù–∞ —Ä–µ–≤—å—é" if task.in_review else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" if task.assigned_to else "–ù–æ–≤–∞—è"
        assigned = f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å" if task.assigned_to == user_id else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–æ–¥–∞
        department_name = get_department_name(task.department)
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        if not task.completed:
            if task.assigned_to is None:
                markup.add(types.InlineKeyboardButton("‚úã –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"take_{task.task_id}"))
            elif task.assigned_to == user_id:
                # Always show Complete button regardless of review status
                markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"complete_{task.task_id}"))
        
        task_card = f"""
üîπ *{task.title}*
{task.text}

üìÅ –û—Ç–¥–µ–ª: *{department_name}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_emoji} {status_text}*
üë§ {assigned}
"""
        
        bot.send_message(
            message.chat.id,
            task_card,
            reply_markup=markup if markup.keyboard else None,
            parse_mode="Markdown"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–æ–¥–∞
def get_task_status_from_code(status_code):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–æ–¥–∞:
    0 - todo (–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å)
    1 - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–≤ —Ä–∞–±–æ—Ç–µ)
    2 - –Ω–∞ —Ä–µ–≤—å—é (–æ–∂–∏–¥–∞–µ—Ç)
    3 - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        if isinstance(status_code, str):
            status_code = int(status_code)
        
        status_map = {
            0: {"is_completed": False, "is_review": False, "text": "–í –æ—á–µ—Ä–µ–¥–∏", "emoji": "üÜï"},
            1: {"is_completed": False, "is_review": False, "text": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "emoji": "‚è≥"},
            2: {"is_completed": False, "is_review": True, "text": "–ù–∞ —Ä–µ–≤—å—é", "emoji": "üîÑ"},
            3: {"is_completed": True, "is_review": False, "text": "–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "emoji": "‚úÖ"}
        }
        
        return status_map.get(status_code, {"is_completed": False, "is_review": False, "text": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "emoji": "‚ùì"})
    except (ValueError, TypeError):
        logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–∑ –∫–æ–¥–∞: {status_code}")
        return {"is_completed": False, "is_review": False, "text": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "emoji": "‚ùì"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def handle_task_completion(task_id, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ—á–∏—â–∞–µ—Ç –µ—ë –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if task_id in tasks:
            # –û—Ç–º–µ—á–∞–µ–º –µ—ë –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            tasks[task_id].completed = True
            tasks[task_id].in_review = False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            update_task_for_all_users(task_id, completed=True, in_review=False)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        if user_id in user_tasks and task_id in user_tasks[user_id]:
            user_tasks[user_id].remove(task_id)
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É API –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
def sync_task_status(task_id, user_id):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –º–µ–∂–¥—É API –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if task_id not in tasks:
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑ API
        url = f"{API_BASE_URL}/ProjectTask/status/{task_id}"
        response = requests.get(url)
        
        # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª 404, –∑–Ω–∞—á–∏—Ç –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
        if response.status_code == 404:
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ API (404). –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            handle_task_completion(task_id, user_id)
            return
            
        if response.status_code != 200:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –∏–∑ API: {response.status_code}")
            return
            
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –æ—Ç API
        status_data = response.json()
        status_code = status_data.get('status')
        status_string = status_data.get('statusString', '')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∫–æ–¥—É
        status_info = get_task_status_from_code(status_code)
        is_review = status_info["is_review"]
        is_completed = status_info["is_completed"]
        
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: API —Å—Ç–∞—Ç—É—Å –∫–æ–¥={status_code}, —Å—Ç–∞—Ç—É—Å={status_string}, is_review={is_review}, is_completed={is_completed}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
        tasks[task_id].in_review = is_review
        tasks[task_id].completed = is_completed
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if is_completed:
            handle_task_completion(task_id, user_id)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            update_task_for_all_users(task_id, completed=is_completed, in_review=is_review)
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: completed={tasks[task_id].completed}, in_review={tasks[task_id].in_review}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")

@bot.message_handler(func=lambda message: message.text == 'üîç –ú–æ–∏ –∑–∞–¥–∞—á–∏')
def my_tasks(message):
    """List tasks assigned to the user."""
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    task_dict = {}
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ API
    api_task = get_user_active_tasks(user_id)
    
    # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª 404, –∑–Ω–∞—á–∏—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –æ—á–∏—â–µ–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_active_tasks
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ API, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if api_task:
        task_id = api_task.get('id')
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å API
        sync_task_status(task_id, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        status_code = api_task.get('status')
        status_info = get_task_status_from_code(status_code)
        
        is_review = status_info["is_review"]
        is_completed = status_info["is_completed"]
        status_text = status_info["text"]
        status_emoji = status_info["emoji"]
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Å—Ç—Ä–æ–∫–µ
        task_status = api_task.get('statusString', '').lower()
        is_cancelled = 'cancel' in task_status or '–æ—Ç–º–µ–Ω' in task_status
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –∏–∑ API: –∫–æ–¥={status_code}, —Ç–µ–∫—Å—Ç={task_status}")
        logger.info(f"–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞: is_review={is_review}, is_completed={is_completed}, is_cancelled={is_cancelled}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ª–æ–≤–∞—Ä—å
        task_dict[task_id] = {
            'source': 'api',
            'title': api_task['title'],
            'text': api_task.get('description', api_task.get('text', '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')),
            'department': get_department_name(api_task.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω')),
            'status_emoji': status_emoji,
            'status_text': status_text,
            'is_completed': is_completed,
            'is_review': is_review,
            'is_cancelled': is_cancelled,
            'is_rejected': False,
            'id': task_id
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
        if task_id in tasks:
            tasks[task_id].in_review = is_review
            tasks[task_id].completed = is_completed
    
    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ API
    # –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–∫–∞–∑–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤ API
    if not api_task and user_id in user_tasks and user_tasks[user_id]:
        for task_id in user_tasks[user_id].copy():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏
            if task_id in tasks:
                task = tasks[task_id]
                if task.assigned_to == user_id:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
                    sync_task_status(task_id, user_id)
                    
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if task_id in tasks and task_id in user_tasks.get(user_id, []):
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                        status_emoji = "‚úÖ" if task.completed else "üîÑ" if task.in_review else "‚è≥"
                        status_text = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.completed else "–ù–∞ —Ä–µ–≤—å—é" if task.in_review else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ª–æ–≤–∞—Ä—å
                        task_dict[task_id] = {
                            'source': 'local',
                            'title': task.title,
                            'text': task.text,
                            'department': get_department_name(task.department),
                            'status_emoji': status_emoji,
                            'status_text': status_text,
                            'is_completed': task.completed,
                            'is_review': task.in_review,
                            'is_cancelled': False,
                            'is_rejected': False,
                            'id': task_id
                        }
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    active_tasks = []
    completed_tasks = []
    
    for task_info in task_dict.values():
        # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–º–µ–Ω—ã
        if task_info['is_cancelled']:
            continue
            
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if task_info['is_completed']:
            completed_tasks.append(task_info)
        else:
            active_tasks.append(task_info)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if active_tasks or completed_tasks:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if active_tasks:
            bot.send_message(
                message.chat.id,
                "üîç *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ –≤–∞—Å:",
                parse_mode="Markdown"
            )
            
            for task_info in active_tasks:
                markup = types.InlineKeyboardMarkup(row_width=1)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if not task_info['is_review']:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–¥–∞—á –Ω–µ –Ω–∞ —Ä–µ–≤—å—é
                    markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", 
                        callback_data=f"complete_api_{task_info['id']}" if task_info['source'] == 'api' else f"complete_{task_info['id']}"))
                
                task_card = f"""
üîπ *{task_info['title']}*
{task_info['text']}

üìÅ –û—Ç–¥–µ–ª: *{task_info['department']}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{task_info['status_emoji']} {task_info['status_text']}*
üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å
"""
                
                bot.send_message(
                    message.chat.id,
                    task_card,
                    reply_markup=markup if markup.keyboard else None,
                    parse_mode="Markdown"
                )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if completed_tasks:
            bot.send_message(
                message.chat.id,
                "‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*",
                parse_mode="Markdown"
            )
            
            for task_info in completed_tasks:
                task_card = f"""
üîπ *{task_info['title']}*
{task_info['text']}

üìÅ –û—Ç–¥–µ–ª: *{task_info['department']}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞*
üë§ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤–∞–º–∏
"""
                
                bot.send_message(
                    message.chat.id,
                    task_card,
                    parse_mode="Markdown"
                )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á - —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        bot.send_message(
            message.chat.id,
            "üì≠ *–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n–í—ã –ø–æ–∫–∞ –Ω–µ –≤–∑—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
            parse_mode="Markdown",
            reply_markup=get_main_menu()
        )

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def help_command(message):
    """Show help information."""
    help_text = """
‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:

‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ë—Ä–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
2. –ù–∞–∂–º–∏—Ç–µ "‚úã –í–∑—è—Ç—å –∑–∞–¥–∞—á—É" –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∑–∞–¥–∞—á–µ–π
3. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á –Ω–∞–∂–º–∏—Ç–µ "üîç –ú–æ–∏ –∑–∞–¥–∞—á–∏"
4. –ö–æ–≥–¥–∞ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:*
–í–∞—à Telegram ID: `{user_id}`
–≠—Ç–æ—Ç ID –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –æ—Ç —Å–∏—Å—Ç–µ–º—ã.
"""
    user_id = message.from_user.id
    bot.send_message(message.chat.id, help_text.format(user_id=user_id), parse_mode="Markdown", reply_markup=get_main_menu())

@bot.callback_query_handler(func=lambda call: True)
def button_handler(call):
    """Handle button presses."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
        callback_data = call.data
        user_id = call.from_user.id
        user_first_name = call.from_user.first_name
        user_last_name = call.from_user.last_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–¥–µ–ª–∞
        if callback_data.startswith("register_dept_"):
            department_id = int(callback_data.split("_")[-1])
            department_name = get_department_name(department_id)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –æ—Ç–¥–µ–ª–æ–º
            registration_result = register_worker(user_id, user_first_name, user_last_name, department_id)
            
            if registration_result:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n\n–í–∞—à –æ—Ç–¥–µ–ª: *{department_name}*",
                    parse_mode="Markdown"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                bot.send_message(
                    call.message.chat.id,
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n\n‚Ä¢ *üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á\n‚Ä¢ *üîç –ú–æ–∏ –∑–∞–¥–∞—á–∏* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –Ω–∞ –≤–∞—Å\n‚Ä¢ *‚ÑπÔ∏è –ü–æ–º–æ—â—å* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
                    parse_mode="Markdown",
                    reply_markup=get_main_menu()
                )
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå *–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.add(
                    types.InlineKeyboardButton("Frontend", callback_data="register_dept_1"),
                    types.InlineKeyboardButton("Backend", callback_data="register_dept_2"),
                    types.InlineKeyboardButton("UI/UX", callback_data="register_dept_3")
                )
                
                bot.send_message(
                    call.message.chat.id,
                    "üìã *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª —Å–Ω–æ–≤–∞:*",
                    parse_mode="Markdown",
                    reply_markup=markup
                )
            
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º –æ—Ç–¥–µ–ª–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif callback_data.startswith("select_dept_"):
            department_id = int(callback_data.split("_")[-1])
            department_name = get_department_name(department_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = update_worker_department(user_id, department_id)
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"‚úÖ *–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω*\n\n–í–∞—à –æ—Ç–¥–µ–ª: *{department_name}*",
                    parse_mode="Markdown"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                bot.send_message(
                    call.message.chat.id,
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
                    reply_markup=get_main_menu()
                )
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ç–¥–µ–ª–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="Markdown"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                bot.send_message(
                    call.message.chat.id,
                    "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
                    reply_markup=get_main_menu()
                )
            
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –≤ callback_data
        if "_" in callback_data:
            action, task_id = callback_data.split("_", 1)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ø–∞–º—è—Ç–∏
            if task_id not in tasks:
                bot.answer_callback_query(call.id, text="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.", show_alert=True)
                return
            
            task = tasks[task_id]
            
            if action == "take":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
                if task.assigned_to is not None:
                    # –ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
                    assigned_user_name = "–¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                    try:
                        url = f"{API_BASE_URL}/workers/{task.assigned_to}"
                        response = requests.get(url)
                        if response.status_code == 200:
                            worker_data = response.json()
                            assigned_user_name = worker_data.get("fullName", f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID:{task.assigned_to}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {task.assigned_to}: {e}")
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=f"‚ùå *–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞*\n\n–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {assigned_user_name}.",
                        parse_mode="Markdown"
                    )
                    bot.answer_callback_query(
                        call.id, 
                        text=f"–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {assigned_user_name}.", 
                        show_alert=True
                    )
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤–∑—è—Ç—ã–µ –∑–∞–¥–∞—á–∏
                api_task = get_user_active_tasks(user_id)
                has_active_tasks_in_api = api_task is not None
                
                has_active_tasks_locally = False
                if user_id in user_tasks and user_tasks[user_id]:
                    for existing_task_id in user_tasks[user_id]:
                        if existing_task_id in tasks:
                            existing_task = tasks[existing_task_id]
                            if not existing_task.completed:
                                has_active_tasks_locally = True
                                break
                
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–∑—è—Ç—å –Ω–æ–≤—É—é
                if has_active_tasks_in_api or has_active_tasks_locally:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="‚ùå *–ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á*\n\n–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤–∑—è—Ç—å –Ω–æ–≤—É—é.",
                        parse_mode="Markdown"
                    )
                    bot.answer_callback_query(
                        call.id, 
                        text="–ù–µ–ª—å–∑—è –≤–∑—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —Å–Ω–∞—á–∞–ª–∞.", 
                        show_alert=True
                    )
                    return
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
                success, result = accept_task(user_id, task_id)
                
                if success:
                    # API —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª –∑–∞–¥–∞—á—É
                    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —á–µ—Ä–µ–∑ API")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if user_id not in user_tasks:
                        user_tasks[user_id] = []
                    if task_id not in user_tasks[user_id]:
                        user_tasks[user_id].append(task_id)
                        
                    # –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞—á–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
                    sync_task_status(task_id, user_id)
                else:
                    # API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –∫–µ–º-—Ç–æ –µ—â–µ –ø–æ–∫–∞ –º—ã –æ–∂–∏–¥–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ API
                    if task.assigned_to is not None:
                        bot.edit_message_text(
                            chat_id=call.message.chat.id,
                            message_id=call.message.message_id,
                            text="‚ùå *–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞*\n\n–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                            parse_mode="Markdown"
                        )
                        bot.answer_callback_query(call.id, text="–ó–∞–¥–∞—á–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.")
                        return
                    
                    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                    task.assigned_to = user_id
                    if user_id not in user_tasks:
                        user_tasks[user_id] = []
                    user_tasks[user_id].append(task_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                update_task_for_all_users(task_id, assigned_to=user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                task_status_code = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ API
                try:
                    url = f"{API_BASE_URL}/ProjectTask/status/{task_id}"
                    response = requests.get(url)
                    if response.status_code == 200:
                        status_data = response.json()
                        task_status_code = status_data.get('status', 1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {e}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –∫–æ–¥—É
                status_info = get_task_status_from_code(task_status_code)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –≤–∑—è–ª –∑–∞–¥–∞—á—É
                markup = types.InlineKeyboardMarkup(row_width=1)
                
                # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞ —Ä–µ–≤—å—é –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if not status_info["is_review"] and not status_info["is_completed"]:
                    markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"complete_{task.task_id}"))
                
                task_card = f"""
üîπ *{task.title}*
{task.text}

üìÅ –û—Ç–¥–µ–ª: *{get_department_name(task.department)}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_info["emoji"]} {status_info["text"]}*
üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å
"""
                
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=task_card,
                    reply_markup=markup if markup.keyboard else None,
                    parse_mode="Markdown"
                )
                
                # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏
                bot.answer_callback_query(
                    call.id, 
                    text="‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!", 
                    show_alert=True
                )
                
            elif action == "complete":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if task.assigned_to != user_id:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="‚ùå *–û—à–∏–±–∫–∞*\n\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å.",
                        parse_mode="Markdown"
                    )
                    bot.answer_callback_query(call.id, text="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å.")
                    return
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ API
                success, message_text = complete_task(task_id)
                
                if success:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å API
                    try:
                        sync_task_status(task_id, user_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                        
                    # –í—Å–µ–≥–¥–∞ –æ—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –Ω–∞ —Ä–µ–≤—å—é, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    task.completed = False
                    task.in_review = True
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ù–∞ —Ä–µ–≤—å—é" (–∫–æ–¥ 2)
                    status_info = get_task_status_from_code(2)
                    status_text = status_info["text"]
                    status_emoji = status_info["emoji"]
                    
                    notification_text = "üìù –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é!"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    update_task_for_all_users(task_id, in_review=True, completed=False)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    task_card = f"""
üîπ *{task.title}*
{task.text}

üìÅ –û—Ç–¥–µ–ª: *{task.department}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_emoji} {status_text}*
üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å
"""
                    
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=task_card,
                        parse_mode="Markdown"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    bot.answer_callback_query(
                        call.id, 
                        text=notification_text, 
                        show_alert=True
                    )
                else:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
                    error_text = f"‚ùå –û—à–∏–±–∫–∞: {message_text}"
                    if len(error_text) > 200:
                        error_text = error_text[:197] + "..."
                        
                    bot.answer_callback_query(
                        call.id, 
                        text=error_text, 
                        show_alert=True
                    )
            
            elif action == "review":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é
                if task.assigned_to != user_id or not task.in_review:
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text="‚ùå *–û—à–∏–±–∫–∞*\n\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–µ–≤—å—é.",
                        parse_mode="Markdown"
                    )
                    bot.answer_callback_query(call.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.")
                    return
                
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —á–µ—Ä–µ–∑ API
                success, message_text = complete_task(task_id)
                
                if success:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å —Å API
                    try:
                        sync_task_status(task_id, user_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                    
                    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    task.completed = True
                    task.in_review = False
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" (–∫–æ–¥ 3)
                    status_info = get_task_status_from_code(3)
                    status_text = status_info["text"]
                    status_emoji = status_info["emoji"]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    update_task_for_all_users(task_id, completed=True, in_review=False)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    task_card = f"""
üîπ *{task.title}*
{task.text}

üìÅ –û—Ç–¥–µ–ª: *{task.department}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_emoji} {status_text}*
üë§ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤–∞–º–∏
"""
                    
                    bot.edit_message_text(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        text=task_card,
                        parse_mode="Markdown"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                    bot.answer_callback_query(
                        call.id, 
                        text="üéâ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —Ä–µ–≤—å—é!", 
                        show_alert=True
                    )
                else:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
                    error_text = f"‚ùå –û—à–∏–±–∫–∞: {message_text}"
                    if len(error_text) > 200:
                        error_text = error_text[:197] + "..."
                        
                    bot.answer_callback_query(
                        call.id, 
                        text=error_text, 
                        show_alert=True
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query: {e}")
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.send_message(
        message.chat.id, 
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_menu()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
def notify_all_about_new_task(task_data):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        url = f"{API_BASE_URL}/workers"
        response = requests.get(url)
        
        if response.status_code != 200:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code} - {response.text}")
            return
        
        users = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–æ–¥–∞
        department_name = get_department_name(task_data['Department'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        notification = f"""
üÜï *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!*

üîπ *{task_data['Title']}*
{task_data['Text']}

üìÅ –û—Ç–¥–µ–ª: *{department_name}*

–ù–∞–∂–º–∏—Ç–µ "‚úã –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –µ—ë –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
"""
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("‚úã –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"take_{task_data['TaskId']}"))
        
        task_department = task_data.get('Department')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –¥–ª—è –æ—Ç–¥–µ–ª–∞: {task_department}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Ç–æ–≥–æ –∂–µ –æ—Ç–¥–µ–ª–∞
        for user in users:
            try:
                telegram_id = user.get('telegramId')
                user_department = user.get('department')
                
                if not telegram_id:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–¥–µ–ª–∞
                department_match = False
                if user_department is None or task_department is None:  # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–º
                    department_match = True
                elif isinstance(task_department, str) and isinstance(user_department, (int, float)):
                    # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –∑–∞–¥–∞—á–∏ - —Å—Ç—Ä–æ–∫–∞, –∞ –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —á–∏—Å–ª–æ
                    department_match = str(user_department) in task_department.lower()
                    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ (—Å—Ç—Ä–æ–∫–∞-—á–∏—Å–ª–æ): {task_department} –∏ {user_department}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {department_match}")
                elif isinstance(user_department, str) and isinstance(task_department, (int, float)):
                    # –ï—Å–ª–∏ –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å—Ç—Ä–æ–∫–∞, –∞ –æ—Ç–¥–µ–ª –∑–∞–¥–∞—á–∏ - —á–∏—Å–ª–æ
                    department_match = str(task_department) in user_department.lower()
                    logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ (—á–∏—Å–ª–æ-—Å—Ç—Ä–æ–∫–∞): {user_department} –∏ {task_department}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {department_match}")
                else:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ, –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–µ –∫ —Å—Ç—Ä–æ–∫–∞–º
                    try:
                        user_dept_str = str(user_department).lower()
                        task_dept_str = str(task_department).lower()
                        department_match = user_dept_str == task_dept_str or task_dept_str in user_dept_str or user_dept_str in task_dept_str
                        logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤ (—Å—Ç—Ä–æ–∫–æ–≤–æ–µ): '{task_dept_str}' –∏ '{user_dept_str}', —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {department_match}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–æ–≤: {e}")
                        department_match = True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                
                # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–¥–µ–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
                if department_match:
                    bot.send_message(
                        telegram_id,
                        notification,
                        reply_markup=markup,
                        parse_mode="Markdown"
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ {task_data['TaskId']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id} (–æ—Ç–¥–µ–ª: {user_department})")
                else:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id} (–æ—Ç–¥–µ–ª: {user_department}), —Ç–∞–∫ –∫–∞–∫ –æ—Ç–¥–µ–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç {task_department}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")

async def kafka_consumer():
    """Consume messages from Kafka topic."""
    consumer = AIOKafkaConsumer(
        KAFKA_TOPIC,
        bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
        value_deserializer=lambda m: json.loads(m.decode('utf-8'))
    )
    
    await consumer.start()
    try:
        async for msg in consumer:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Kafka
                task_data = msg.value
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Kafka: {task_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                if not task_data.get("RecipientTelegramIds") or len(task_data["RecipientTelegramIds"]) == 0:
                    logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {task_data}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞ C# —Å–µ—Ä–≤–∏—Å–∞
                base_task = Task(
                    task_id=UUID(task_data["TaskId"]),
                    title=task_data["Title"],
                    text=task_data["Text"],
                    department=task_data["Department"]
                )
                
                task_id_str = str(base_task.task_id)
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ {task_id_str} –¥–ª—è –æ—Ç–¥–µ–ª–∞ {base_task.department}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                for recipient_id in task_data.get("RecipientTelegramIds", []):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    try:
                        recipient_department = None
                        try:
                            url = f"{API_BASE_URL}/workers/{recipient_id}"
                            response = requests.get(url)
                            if response.status_code == 200:
                                worker_data = response.json()
                                recipient_department = worker_data.get("department")
                                logger.info(f"–û—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_id}: {recipient_department}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient_id}: {e}")
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–¥–µ–ª–∞
                        # –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                        recipient_task = Task(
                            task_id=base_task.task_id,
                            title=base_task.title,
                            text=base_task.text,
                            department=base_task.department,
                            tg_id=recipient_id
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                        tasks[task_id_str] = recipient_task
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –∑–∞–¥–∞—á—É"
                        markup = types.InlineKeyboardMarkup(row_width=1)
                        markup.add(types.InlineKeyboardButton("‚úã –í–∑—è—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"take_{task_id_str}"))
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–æ–¥–∞
                        department_name = get_department_name(recipient_task.department)
                        
                        notification = f"""
üîî *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞!*

üîπ *{recipient_task.title}*
{recipient_task.text}

üìÅ –û—Ç–¥–µ–ª: *{department_name}*
"""
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ç–¥–µ–ª–∞–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
                        try:
                            bot.send_message(
                                recipient_id,
                                notification,
                                reply_markup=markup,
                                parse_mode="Markdown"
                            )
                            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ {task_id_str} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è {recipient_id}: {e}")

                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {task_id_str} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Kafka: {e}")
    finally:
        await consumer.stop()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def process_simple_notification(notification_data):
    """Process simple notification messages from Kafka."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        correlation_id = notification_data.get("CorrelationId")
        message_type = notification_data.get("MessageType", "Info")
        content = notification_data.get("Content", "")
        timestamp = notification_data.get("Timestamp")
        target_user_ids = notification_data.get("TargetUserTelegramIds", [])
        task_id = notification_data.get("TaskId")  # ID –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≤—å—é
        status_code = notification_data.get("StatusCode")  # –ß–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        
        if not content:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {notification_data}")
            return
        
        # –ò—â–µ–º —Ñ—Ä–∞–∑—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        completion_phrases = [
            "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞", 
            "–∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            "–∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", 
            "–∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            "–ø—Ä–∏–Ω—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É",
            "–ø—Ä–∏–Ω—è—Ç–æ"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏/–ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        is_task_accepted = any(phrase in content.lower() for phrase in completion_phrases)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API, –µ—Å–ª–∏ –µ—Å—Ç—å ID –∑–∞–¥–∞—á–∏
        if task_id:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
                url = f"{API_BASE_URL}/ProjectTask/status/{task_id}"
                response = requests.get(url)
                
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ = 3 (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞) –∏–ª–∏ 404 (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª–µ–Ω–∞), —Å—á–∏—Ç–∞–µ–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π
                if response.status_code == 404 or (response.status_code == 200 and response.json().get('status') == 3):
                    is_task_accepted = True
                    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –ø–æ –æ—Ç–≤–µ—Ç—É API")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        if (is_task_accepted or status_code == 3) and task_id:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content}")
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —ç—Ç–∞ –∑–∞–¥–∞—á–∞
            affected_users = []
            for user_id, task_list in user_tasks.items():
                if task_id in task_list:
                    affected_users.append(user_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in affected_users:
                handle_task_completion(task_id, user_id)
                
            # –ï—Å–ª–∏ –µ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º —è–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if target_user_ids and len(target_user_ids) > 0:
                notification_text = f"""
‚úÖ *–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*

{content}

_–í—Ä–µ–º—è: {timestamp}_
"""
                for user_id in target_user_ids:
                    try:
                        bot.send_message(
                            user_id,
                            notification_text,
                            parse_mode="Markdown"
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        
            # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            return
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        type_emoji = {
            "Info": "‚ÑπÔ∏è",
            "Warning": "‚ö†Ô∏è",
            "SystemAlert": "üîî",
            "Success": "‚úÖ",
            "Error": "‚ùå",
            "Review": "üîÑ",  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–≤—å—é
            "Completed": "‚úÖ"  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        }.get(message_type, "‚ÑπÔ∏è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≤—å—é –∑–∞–¥–∞—á–∏
        is_review_notification = message_type == "Review" and task_id
        is_completion_notification = (message_type == "Completed" or message_type == "Success" or message_type == "Complete") and task_id
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        if task_id and not is_completion_notification and not is_review_notification:
            if ("–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" in content.lower() or 
                "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" in content.lower() or 
                "completed" in content.lower() or 
                "—É—Å–ø–µ—à–Ω–æ" in content.lower() or
                "–ø—Ä–∏–Ω—è—Ç–∞" in content.lower()):
                is_completion_notification = True
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–∫—Å—Ç—É: {content}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –ø—Ä–∏–Ω—è—Ç–∏–µ, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–≤—å—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        is_rejection = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞" in content.lower() or "–æ—Ç–∫–ª–æ–Ω–µ–Ω" in content.lower() or "reject" in content.lower()
        is_approval = ("–ø—Ä–∏–Ω—è—Ç–∞" in content.lower() or "–ø—Ä–∏–Ω—è—Ç" in content.lower() or 
                        "accept" in content.lower() or "approved" in content.lower() or
                        "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" in content.lower() or "–∑–∞–≤–µ—Ä—à–µ–Ω–∞" in content.lower() or 
                        "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in content.lower() or "—É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" in content.lower())
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        notification_text = f"""
{type_emoji} *{message_type}*

{content}

_–í—Ä–µ–º—è: {timestamp}_
"""
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω status_code, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        status_info = None
        if status_code is not None:
            status_info = get_task_status_from_code(status_code)
            logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–¥–∞: {status_code} -> {status_info}")

        # –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≤—å—é/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏ —É –Ω–∞—Å –µ—Å—Ç—å ID –∑–∞–¥–∞—á–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        markup = None
        if (is_review_notification or is_completion_notification) and task_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if task_id in tasks:
                task = tasks[task_id]
                
                # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if status_info:
                    is_completed = status_info["is_completed"]
                    is_review = status_info["is_review"]
                    status_text = status_info["text"]
                    status_emoji = status_info["emoji"]
                else:
                    # –ò–Ω–∞—á–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    if is_completion_notification or is_approval:
                        # –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏
                        is_completed = True
                        is_review = False
                        status_text = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
                        status_emoji = "‚úÖ"
                    elif is_rejection:
                        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
                        is_completed = False
                        is_review = False
                        status_text = "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É"
                        status_emoji = "‚è≥"
                    else:
                        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–µ–≤—å—é
                        is_completed = False
                        is_review = True
                        status_text = "–ù–∞ —Ä–µ–≤—å—é"
                        status_emoji = "üîÑ"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –∏–∑–º–µ–Ω–∏–ª–∞ —Å—Ç–∞—Ç—É—Å: is_completed={is_completed}, is_review={is_review}")
                logger.info(f"–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {content}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                task.completed = is_completed
                task.in_review = is_review
                        
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                update_task_for_all_users(task_id, completed=is_completed, in_review=is_review)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
                markup = types.InlineKeyboardMarkup(row_width=1)
                
                if is_completed:
                    # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–æ–∫
                    pass
                elif is_rejection:
                    # –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"
                    markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"complete_{task_id}"))
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –∫–æ–¥–∞
                department_name = get_department_name(task.department)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                notification_text = f"""
{type_emoji} *–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω*

{content}

üîπ *{task.title}*
{task.text}

üìÅ –û—Ç–¥–µ–ª: *{department_name}*
üè∑Ô∏è –°—Ç–∞—Ç—É—Å: *{status_emoji} {status_text}*

_–í—Ä–µ–º—è: {timestamp}_
"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º
        if target_user_ids and len(target_user_ids) > 0:
            for user_id in target_user_ids:
                try:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    if len(notification_text) > 4000:
                        notification_text = notification_text[:3997] + "..."
                        
                    bot.send_message(
                        user_id,
                        notification_text,
                        parse_mode="Markdown",
                        reply_markup=markup
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {correlation_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º
            try:
                url = f"{API_BASE_URL}/workers"
                response = requests.get(url)
                
                if response.status_code == 200:
                    users = response.json()
                    for user in users:
                        try:
                            telegram_id = user.get('telegramId')
                            if telegram_id:
                                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                                if len(notification_text) > 4000:
                                    notification_text = notification_text[:3997] + "..."
                                    
                                bot.send_message(
                                    telegram_id,
                                    notification_text,
                                    parse_mode="Markdown",
                                    reply_markup=markup
                                )
                                logger.info(f"–®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {correlation_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {correlation_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def simple_notifications_consumer():
    """Consume messages from SimpleNotifications Kafka topic."""
    consumer = AIOKafkaConsumer(
        KAFKA_SIMPLE_NOTIFICATIONS_TOPIC,
        bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
        value_deserializer=lambda m: json.loads(m.decode('utf-8'))
    )
    
    await consumer.start()
    try:
        logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–µ {KAFKA_SIMPLE_NOTIFICATIONS_TOPIC}")
        async for msg in consumer:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Kafka
                notification_data = msg.value
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Kafka: {notification_data}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await process_simple_notification(notification_data)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Kafka (SimpleNotifications): {e}")
    finally:
        await consumer.stop()

def run_bot():
    """Run the Telegram bot."""
    bot.infinity_polling()

def run_kafka_consumer():
    """Run the Kafka consumer in the event loop."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [
        loop.create_task(kafka_consumer()),
        loop.create_task(simple_notifications_consumer())
    ]
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        loop.run_until_complete(asyncio.gather(*tasks))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ Kafka –∫–æ–Ω—Å—å—é–º–µ—Ä–∞—Ö: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
        loop.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def update_task_for_all_users(task_id, assigned_to=None, completed=False, in_review=None):
    """Update task display for all users when its status changes."""
    try:
        if task_id not in tasks:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É: {task_id}")
            return
        
        task = tasks[task_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –Ω–∞—à–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if assigned_to is not None:
            task.assigned_to = assigned_to
        
        if completed is not None:
            task.completed = completed
            
        if in_review is not None:
            task.in_review = in_review
        
        # –ú—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
        logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: assigned_to={task.assigned_to}, completed={task.completed}, in_review={task.in_review}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
def update_worker_department(telegram_id, department_id):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
        url = f"{API_BASE_URL}/workers/{telegram_id}/department"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API - –æ–±—ä–µ–∫—Ç JSON —Å –ø–æ–ª–µ–º department
        data = {"department": department_id}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {department_id}")
        response = requests.put(url, json=data, headers={"Content-Type": "application/json"})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code in [200, 204]:
            logger.info(f"–û—Ç–¥–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {telegram_id} -> {department_id}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return False

if __name__ == "__main__":
    # Start Kafka consumer in a separate thread
    kafka_thread = threading.Thread(target=run_kafka_consumer, daemon=True)
    kafka_thread.start()
    
    # Start the bot in the main thread
    logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    run_bot()
